// Generated by gencpp from file hj_interface/LedByTask.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_LEDBYTASK_H
#define HJ_INTERFACE_MESSAGE_LEDBYTASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct LedByTask_
{
  typedef LedByTask_<ContainerAllocator> Type;

  LedByTask_()
    : task_led(0)
    , clean_mode_led(0)  {
    }
  LedByTask_(const ContainerAllocator& _alloc)
    : task_led(0)
    , clean_mode_led(0)  {
  (void)_alloc;
    }



   typedef int32_t _task_led_type;
  _task_led_type task_led;

   typedef int32_t _clean_mode_led_type;
  _clean_mode_led_type clean_mode_led;





  typedef boost::shared_ptr< ::hj_interface::LedByTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::LedByTask_<ContainerAllocator> const> ConstPtr;

}; // struct LedByTask_

typedef ::hj_interface::LedByTask_<std::allocator<void> > LedByTask;

typedef boost::shared_ptr< ::hj_interface::LedByTask > LedByTaskPtr;
typedef boost::shared_ptr< ::hj_interface::LedByTask const> LedByTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::LedByTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::LedByTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::LedByTask_<ContainerAllocator1> & lhs, const ::hj_interface::LedByTask_<ContainerAllocator2> & rhs)
{
  return lhs.task_led == rhs.task_led &&
    lhs.clean_mode_led == rhs.clean_mode_led;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::LedByTask_<ContainerAllocator1> & lhs, const ::hj_interface::LedByTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::LedByTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::LedByTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::LedByTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::LedByTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::LedByTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::LedByTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::LedByTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f05dfb0b95782fbe754ef8eeb8e3a4d5";
  }

  static const char* value(const ::hj_interface::LedByTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf05dfb0b95782fbeULL;
  static const uint64_t static_value2 = 0x754ef8eeb8e3a4d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::LedByTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/LedByTask";
  }

  static const char* value(const ::hj_interface::LedByTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::LedByTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_led          # 1-all in one, 2-池底 3-池壁+池底+水线(X9) or 池壁(T1PRO) 4-水面(X9) or 水线(T1PRO) 5-其他\n"
"int32 clean_mode_led    # 1-变频 2-标准 3-深度\n"
;
  }

  static const char* value(const ::hj_interface::LedByTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::LedByTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_led);
      stream.next(m.clean_mode_led);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedByTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::LedByTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::LedByTask_<ContainerAllocator>& v)
  {
    s << indent << "task_led: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_led);
    s << indent << "clean_mode_led: ";
    Printer<int32_t>::stream(s, indent + "  ", v.clean_mode_led);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_LEDBYTASK_H
