// Generated by gencpp from file hj_interface/Pose.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_POSE_H
#define HJ_INTERFACE_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : timestamp()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , type(0)
    , is_six_dof(false)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : timestamp()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , type(0)
    , is_six_dof(false)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _is_six_dof_type;
  _is_six_dof_type is_six_dof;





  typedef boost::shared_ptr< ::hj_interface::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::hj_interface::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::hj_interface::Pose > PosePtr;
typedef boost::shared_ptr< ::hj_interface::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Pose_<ContainerAllocator1> & lhs, const ::hj_interface::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.type == rhs.type &&
    lhs.is_six_dof == rhs.is_six_dof;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Pose_<ContainerAllocator1> & lhs, const ::hj_interface::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d90a8ad1f2317673bee674f9e87521d7";
  }

  static const char* value(const ::hj_interface::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd90a8ad1f2317673ULL;
  static const uint64_t static_value2 = 0xbee674f9e87521d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Pose";
  }

  static const char* value(const ::hj_interface::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"uint8 type #!< id,0 means unknown,1 means static,2 means rotation,3 means straight\n"
"bool is_six_dof\n"
;
  }

  static const char* value(const ::hj_interface::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.type);
      stream.next(m.is_six_dof);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Pose_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "is_six_dof: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_six_dof);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_POSE_H
