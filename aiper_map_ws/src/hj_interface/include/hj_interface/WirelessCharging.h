// Generated by gencpp from file hj_interface/WirelessCharging.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_WIRELESSCHARGING_H
#define HJ_INTERFACE_MESSAGE_WIRELESSCHARGING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct WirelessCharging_
{
  typedef WirelessCharging_<ContainerAllocator> Type;

  WirelessCharging_()
    : bridge_circuit_vol(0)
    , charger_ch_vol(0)
    , bridge_circuit_cur(0)
    , charger_ch_cur(0)
    , bridge_circuit_temp(0)
    , coil_temp(0)  {
    }
  WirelessCharging_(const ContainerAllocator& _alloc)
    : bridge_circuit_vol(0)
    , charger_ch_vol(0)
    , bridge_circuit_cur(0)
    , charger_ch_cur(0)
    , bridge_circuit_temp(0)
    , coil_temp(0)  {
  (void)_alloc;
    }



   typedef uint16_t _bridge_circuit_vol_type;
  _bridge_circuit_vol_type bridge_circuit_vol;

   typedef uint16_t _charger_ch_vol_type;
  _charger_ch_vol_type charger_ch_vol;

   typedef uint16_t _bridge_circuit_cur_type;
  _bridge_circuit_cur_type bridge_circuit_cur;

   typedef uint16_t _charger_ch_cur_type;
  _charger_ch_cur_type charger_ch_cur;

   typedef uint16_t _bridge_circuit_temp_type;
  _bridge_circuit_temp_type bridge_circuit_temp;

   typedef uint16_t _coil_temp_type;
  _coil_temp_type coil_temp;





  typedef boost::shared_ptr< ::hj_interface::WirelessCharging_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::WirelessCharging_<ContainerAllocator> const> ConstPtr;

}; // struct WirelessCharging_

typedef ::hj_interface::WirelessCharging_<std::allocator<void> > WirelessCharging;

typedef boost::shared_ptr< ::hj_interface::WirelessCharging > WirelessChargingPtr;
typedef boost::shared_ptr< ::hj_interface::WirelessCharging const> WirelessChargingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::WirelessCharging_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::WirelessCharging_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::WirelessCharging_<ContainerAllocator1> & lhs, const ::hj_interface::WirelessCharging_<ContainerAllocator2> & rhs)
{
  return lhs.bridge_circuit_vol == rhs.bridge_circuit_vol &&
    lhs.charger_ch_vol == rhs.charger_ch_vol &&
    lhs.bridge_circuit_cur == rhs.bridge_circuit_cur &&
    lhs.charger_ch_cur == rhs.charger_ch_cur &&
    lhs.bridge_circuit_temp == rhs.bridge_circuit_temp &&
    lhs.coil_temp == rhs.coil_temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::WirelessCharging_<ContainerAllocator1> & lhs, const ::hj_interface::WirelessCharging_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::WirelessCharging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::WirelessCharging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::WirelessCharging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::WirelessCharging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::WirelessCharging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::WirelessCharging_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::WirelessCharging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33e02f59b1105a89c0aa9b09dd15b264";
  }

  static const char* value(const ::hj_interface::WirelessCharging_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33e02f59b1105a89ULL;
  static const uint64_t static_value2 = 0xc0aa9b09dd15b264ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::WirelessCharging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/WirelessCharging";
  }

  static const char* value(const ::hj_interface::WirelessCharging_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::WirelessCharging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 bridge_circuit_vol   # bridge circuit voltage,mV\n"
"uint16 charger_ch_vol       # charger channel voltage,mV\n"
"uint16 bridge_circuit_cur   # bridge circuit current,mA\n"
"uint16 charger_ch_cur       # charger channel current,mA\n"
"uint16 bridge_circuit_temp  # bridge circuit temperature,°C\n"
"uint16 coil_temp            # coil temperature,°C\n"
;
  }

  static const char* value(const ::hj_interface::WirelessCharging_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::WirelessCharging_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bridge_circuit_vol);
      stream.next(m.charger_ch_vol);
      stream.next(m.bridge_circuit_cur);
      stream.next(m.charger_ch_cur);
      stream.next(m.bridge_circuit_temp);
      stream.next(m.coil_temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WirelessCharging_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::WirelessCharging_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::WirelessCharging_<ContainerAllocator>& v)
  {
    s << indent << "bridge_circuit_vol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bridge_circuit_vol);
    s << indent << "charger_ch_vol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.charger_ch_vol);
    s << indent << "bridge_circuit_cur: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bridge_circuit_cur);
    s << indent << "charger_ch_cur: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.charger_ch_cur);
    s << indent << "bridge_circuit_temp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bridge_circuit_temp);
    s << indent << "coil_temp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.coil_temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_WIRELESSCHARGING_H
