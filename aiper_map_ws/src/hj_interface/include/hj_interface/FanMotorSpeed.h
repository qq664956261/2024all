// Generated by gencpp from file hj_interface/FanMotorSpeed.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_FANMOTORSPEED_H
#define HJ_INTERFACE_MESSAGE_FANMOTORSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct FanMotorSpeed_
{
  typedef FanMotorSpeed_<ContainerAllocator> Type;

  FanMotorSpeed_()
    : timestamp()
    , speed(0)  {
    }
  FanMotorSpeed_(const ContainerAllocator& _alloc)
    : timestamp()
    , speed(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint16_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::hj_interface::FanMotorSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::FanMotorSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct FanMotorSpeed_

typedef ::hj_interface::FanMotorSpeed_<std::allocator<void> > FanMotorSpeed;

typedef boost::shared_ptr< ::hj_interface::FanMotorSpeed > FanMotorSpeedPtr;
typedef boost::shared_ptr< ::hj_interface::FanMotorSpeed const> FanMotorSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::FanMotorSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::FanMotorSpeed_<ContainerAllocator1> & lhs, const ::hj_interface::FanMotorSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::FanMotorSpeed_<ContainerAllocator1> & lhs, const ::hj_interface::FanMotorSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::FanMotorSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::FanMotorSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::FanMotorSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75c1d375a89150971c46ffcdefa258d1";
  }

  static const char* value(const ::hj_interface::FanMotorSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75c1d375a8915097ULL;
  static const uint64_t static_value2 = 0x1c46ffcdefa258d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/FanMotorSpeed";
  }

  static const char* value(const ::hj_interface::FanMotorSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n"
"\n"
"uint16 speed      \n"
;
  }

  static const char* value(const ::hj_interface::FanMotorSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FanMotorSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::FanMotorSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::FanMotorSpeed_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_FANMOTORSPEED_H
