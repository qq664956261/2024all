// Generated by gencpp from file hj_interface/McuSensorStatus.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_MCUSENSORSTATUS_H
#define HJ_INTERFACE_MESSAGE_MCUSENSORSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct McuSensorStatus_
{
  typedef McuSensorStatus_<ContainerAllocator> Type;

  McuSensorStatus_()
    : outwater_status(0)
    , recharge_hall_status(0)
    , dirtybox_hall_status(0)
    , turn_motor_hall_status(0)
    , dtof_status(0)
    , ango_status(0)  {
    }
  McuSensorStatus_(const ContainerAllocator& _alloc)
    : outwater_status(0)
    , recharge_hall_status(0)
    , dirtybox_hall_status(0)
    , turn_motor_hall_status(0)
    , dtof_status(0)
    , ango_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _outwater_status_type;
  _outwater_status_type outwater_status;

   typedef uint8_t _recharge_hall_status_type;
  _recharge_hall_status_type recharge_hall_status;

   typedef uint8_t _dirtybox_hall_status_type;
  _dirtybox_hall_status_type dirtybox_hall_status;

   typedef uint8_t _turn_motor_hall_status_type;
  _turn_motor_hall_status_type turn_motor_hall_status;

   typedef uint8_t _dtof_status_type;
  _dtof_status_type dtof_status;

   typedef uint8_t _ango_status_type;
  _ango_status_type ango_status;





  typedef boost::shared_ptr< ::hj_interface::McuSensorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::McuSensorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct McuSensorStatus_

typedef ::hj_interface::McuSensorStatus_<std::allocator<void> > McuSensorStatus;

typedef boost::shared_ptr< ::hj_interface::McuSensorStatus > McuSensorStatusPtr;
typedef boost::shared_ptr< ::hj_interface::McuSensorStatus const> McuSensorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::McuSensorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::McuSensorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::McuSensorStatus_<ContainerAllocator1> & lhs, const ::hj_interface::McuSensorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.outwater_status == rhs.outwater_status &&
    lhs.recharge_hall_status == rhs.recharge_hall_status &&
    lhs.dirtybox_hall_status == rhs.dirtybox_hall_status &&
    lhs.turn_motor_hall_status == rhs.turn_motor_hall_status &&
    lhs.dtof_status == rhs.dtof_status &&
    lhs.ango_status == rhs.ango_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::McuSensorStatus_<ContainerAllocator1> & lhs, const ::hj_interface::McuSensorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::McuSensorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::McuSensorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::McuSensorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d637f774c54d11c8fc575c9052073938";
  }

  static const char* value(const ::hj_interface::McuSensorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd637f774c54d11c8ULL;
  static const uint64_t static_value2 = 0xfc575c9052073938ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/McuSensorStatus";
  }

  static const char* value(const ::hj_interface::McuSensorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 outwater_status         # 出水, 状态：[0x00] passed；[0x01] failed\n"
"uint8 recharge_hall_status    # 回充hall, 状态：[0x00] passed；[0x01] failed\n"
"uint8 dirtybox_hall_status    # 滤篮hall, 状态：[0x00] passed；[0x01] failed\n"
"uint8 turn_motor_hall_status  # 转向电机hall,状态：[0x00] passed；[0x01] failed\n"
"uint8 dtof_status             # tof, 状态：[0x00] passed；[0x01] failed\n"
"uint8 ango_status             # 岸歌, 状态：[0x00] passed；[0x01] failed\n"
;
  }

  static const char* value(const ::hj_interface::McuSensorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.outwater_status);
      stream.next(m.recharge_hall_status);
      stream.next(m.dirtybox_hall_status);
      stream.next(m.turn_motor_hall_status);
      stream.next(m.dtof_status);
      stream.next(m.ango_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct McuSensorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::McuSensorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::McuSensorStatus_<ContainerAllocator>& v)
  {
    s << indent << "outwater_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.outwater_status);
    s << indent << "recharge_hall_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recharge_hall_status);
    s << indent << "dirtybox_hall_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirtybox_hall_status);
    s << indent << "turn_motor_hall_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_motor_hall_status);
    s << indent << "dtof_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dtof_status);
    s << indent << "ango_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ango_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_MCUSENSORSTATUS_H
