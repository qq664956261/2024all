// Generated by gencpp from file hj_interface/ErrorCodeStatisticRequest.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_ERRORCODESTATISTICREQUEST_H
#define HJ_INTERFACE_MESSAGE_ERRORCODESTATISTICREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct ErrorCodeStatisticRequest_
{
  typedef ErrorCodeStatisticRequest_<ContainerAllocator> Type;

  ErrorCodeStatisticRequest_()
    : time_line(0)  {
    }
  ErrorCodeStatisticRequest_(const ContainerAllocator& _alloc)
    : time_line(0)  {
  (void)_alloc;
    }



   typedef uint8_t _time_line_type;
  _time_line_type time_line;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(END)
  #undef END
#endif

  enum {
    START = 1u,
    END = 2u,
  };


  typedef boost::shared_ptr< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorCodeStatisticRequest_

typedef ::hj_interface::ErrorCodeStatisticRequest_<std::allocator<void> > ErrorCodeStatisticRequest;

typedef boost::shared_ptr< ::hj_interface::ErrorCodeStatisticRequest > ErrorCodeStatisticRequestPtr;
typedef boost::shared_ptr< ::hj_interface::ErrorCodeStatisticRequest const> ErrorCodeStatisticRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator1> & lhs, const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator2> & rhs)
{
  return lhs.time_line == rhs.time_line;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator1> & lhs, const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1e991f95d45b0c848760baefa36c3a7";
  }

  static const char* value(const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1e991f95d45b0c8ULL;
  static const uint64_t static_value2 = 0x48760baefa36c3a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/ErrorCodeStatisticRequest";
  }

  static const char* value(const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 time_line     # 时间线 \n"
"\n"
"uint8 START   = 1    # 开始\n"
"uint8 END     = 2    # 结束 - 清空\n"
"                    \n"
;
  }

  static const char* value(const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_line);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorCodeStatisticRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::ErrorCodeStatisticRequest_<ContainerAllocator>& v)
  {
    s << indent << "time_line: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_line);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_ERRORCODESTATISTICREQUEST_H
