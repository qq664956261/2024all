// Generated by gencpp from file hj_interface/OtaPackData.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_OTAPACKDATA_H
#define HJ_INTERFACE_MESSAGE_OTAPACKDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct OtaPackData_
{
  typedef OtaPackData_<ContainerAllocator> Type;

  OtaPackData_()
    : url()
    , md5()
    , fileLength(0)  {
    }
  OtaPackData_(const ContainerAllocator& _alloc)
    : url(_alloc)
    , md5(_alloc)
    , fileLength(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _url_type;
  _url_type url;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _md5_type;
  _md5_type md5;

   typedef int32_t _fileLength_type;
  _fileLength_type fileLength;





  typedef boost::shared_ptr< ::hj_interface::OtaPackData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::OtaPackData_<ContainerAllocator> const> ConstPtr;

}; // struct OtaPackData_

typedef ::hj_interface::OtaPackData_<std::allocator<void> > OtaPackData;

typedef boost::shared_ptr< ::hj_interface::OtaPackData > OtaPackDataPtr;
typedef boost::shared_ptr< ::hj_interface::OtaPackData const> OtaPackDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::OtaPackData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::OtaPackData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::OtaPackData_<ContainerAllocator1> & lhs, const ::hj_interface::OtaPackData_<ContainerAllocator2> & rhs)
{
  return lhs.url == rhs.url &&
    lhs.md5 == rhs.md5 &&
    lhs.fileLength == rhs.fileLength;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::OtaPackData_<ContainerAllocator1> & lhs, const ::hj_interface::OtaPackData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaPackData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaPackData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaPackData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaPackData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaPackData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaPackData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::OtaPackData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c0bb46ef671932aaad529b4cfcff513";
  }

  static const char* value(const ::hj_interface::OtaPackData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c0bb46ef671932aULL;
  static const uint64_t static_value2 = 0xaad529b4cfcff513ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::OtaPackData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/OtaPackData";
  }

  static const char* value(const ::hj_interface::OtaPackData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::OtaPackData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string url        # 固件包下载地址\n"
"string md5        # 固件包md5值\n"
"int32  fileLength # 文件大小\n"
;
  }

  static const char* value(const ::hj_interface::OtaPackData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::OtaPackData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.url);
      stream.next(m.md5);
      stream.next(m.fileLength);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OtaPackData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::OtaPackData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::OtaPackData_<ContainerAllocator>& v)
  {
    s << indent << "url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.url);
    s << indent << "md5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.md5);
    s << indent << "fileLength: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fileLength);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_OTAPACKDATA_H
