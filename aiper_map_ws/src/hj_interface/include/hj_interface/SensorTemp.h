// Generated by gencpp from file hj_interface/SensorTemp.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_SENSORTEMP_H
#define HJ_INTERFACE_MESSAGE_SENSORTEMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct SensorTemp_
{
  typedef SensorTemp_<ContainerAllocator> Type;

  SensorTemp_()
    : pump_left(0)
    , pump_right(0)
    , left_motor(0)
    , right_motor(0)
    , turn(0)  {
    }
  SensorTemp_(const ContainerAllocator& _alloc)
    : pump_left(0)
    , pump_right(0)
    , left_motor(0)
    , right_motor(0)
    , turn(0)  {
  (void)_alloc;
    }



   typedef int16_t _pump_left_type;
  _pump_left_type pump_left;

   typedef int16_t _pump_right_type;
  _pump_right_type pump_right;

   typedef int16_t _left_motor_type;
  _left_motor_type left_motor;

   typedef int16_t _right_motor_type;
  _right_motor_type right_motor;

   typedef int16_t _turn_type;
  _turn_type turn;





  typedef boost::shared_ptr< ::hj_interface::SensorTemp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::SensorTemp_<ContainerAllocator> const> ConstPtr;

}; // struct SensorTemp_

typedef ::hj_interface::SensorTemp_<std::allocator<void> > SensorTemp;

typedef boost::shared_ptr< ::hj_interface::SensorTemp > SensorTempPtr;
typedef boost::shared_ptr< ::hj_interface::SensorTemp const> SensorTempConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::SensorTemp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::SensorTemp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::SensorTemp_<ContainerAllocator1> & lhs, const ::hj_interface::SensorTemp_<ContainerAllocator2> & rhs)
{
  return lhs.pump_left == rhs.pump_left &&
    lhs.pump_right == rhs.pump_right &&
    lhs.left_motor == rhs.left_motor &&
    lhs.right_motor == rhs.right_motor &&
    lhs.turn == rhs.turn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::SensorTemp_<ContainerAllocator1> & lhs, const ::hj_interface::SensorTemp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SensorTemp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SensorTemp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SensorTemp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SensorTemp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SensorTemp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SensorTemp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::SensorTemp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "990b5b06be3535c17e8dd84032e730da";
  }

  static const char* value(const ::hj_interface::SensorTemp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x990b5b06be3535c1ULL;
  static const uint64_t static_value2 = 0x7e8dd84032e730daULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::SensorTemp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/SensorTemp";
  }

  static const char* value(const ::hj_interface::SensorTemp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::SensorTemp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16  pump_left\n"
"int16  pump_right\n"
"int16  left_motor\n"
"int16  right_motor\n"
"int16  turn\n"
;
  }

  static const char* value(const ::hj_interface::SensorTemp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::SensorTemp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pump_left);
      stream.next(m.pump_right);
      stream.next(m.left_motor);
      stream.next(m.right_motor);
      stream.next(m.turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorTemp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::SensorTemp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::SensorTemp_<ContainerAllocator>& v)
  {
    s << indent << "pump_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pump_left);
    s << indent << "pump_right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pump_right);
    s << indent << "left_motor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_motor);
    s << indent << "right_motor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_motor);
    s << indent << "turn: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_SENSORTEMP_H
