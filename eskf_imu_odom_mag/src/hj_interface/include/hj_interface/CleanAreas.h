// Generated by gencpp from file hj_interface/CleanAreas.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_CLEANAREAS_H
#define HJ_INTERFACE_MESSAGE_CLEANAREAS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct CleanAreas_
{
  typedef CleanAreas_<ContainerAllocator> Type;

  CleanAreas_()
    : clean_area(0)
    , count(0)
    , time(0)  {
    }
  CleanAreas_(const ContainerAllocator& _alloc)
    : clean_area(0)
    , count(0)
    , time(0)  {
  (void)_alloc;
    }



   typedef int32_t _clean_area_type;
  _clean_area_type clean_area;

   typedef int32_t _count_type;
  _count_type count;

   typedef int32_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::hj_interface::CleanAreas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::CleanAreas_<ContainerAllocator> const> ConstPtr;

}; // struct CleanAreas_

typedef ::hj_interface::CleanAreas_<std::allocator<void> > CleanAreas;

typedef boost::shared_ptr< ::hj_interface::CleanAreas > CleanAreasPtr;
typedef boost::shared_ptr< ::hj_interface::CleanAreas const> CleanAreasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::CleanAreas_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::CleanAreas_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::CleanAreas_<ContainerAllocator1> & lhs, const ::hj_interface::CleanAreas_<ContainerAllocator2> & rhs)
{
  return lhs.clean_area == rhs.clean_area &&
    lhs.count == rhs.count &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::CleanAreas_<ContainerAllocator1> & lhs, const ::hj_interface::CleanAreas_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::CleanAreas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::CleanAreas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::CleanAreas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::CleanAreas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::CleanAreas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::CleanAreas_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::CleanAreas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "177bc6c394215afcff96fbd91d519d50";
  }

  static const char* value(const ::hj_interface::CleanAreas_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x177bc6c394215afcULL;
  static const uint64_t static_value2 = 0xff96fbd91d519d50ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::CleanAreas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/CleanAreas";
  }

  static const char* value(const ::hj_interface::CleanAreas_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::CleanAreas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 clean_area  #清扫区域 1-水面 2-池底 3-池壁\n"
"int32 count       #清扫次数\n"
"int32 time        #清扫时间单位分钟\n"
;
  }

  static const char* value(const ::hj_interface::CleanAreas_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::CleanAreas_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clean_area);
      stream.next(m.count);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CleanAreas_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::CleanAreas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::CleanAreas_<ContainerAllocator>& v)
  {
    s << indent << "clean_area: ";
    Printer<int32_t>::stream(s, indent + "  ", v.clean_area);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_CLEANAREAS_H
