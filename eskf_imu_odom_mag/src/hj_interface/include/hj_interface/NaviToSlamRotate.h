// Generated by gencpp from file hj_interface/NaviToSlamRotate.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_NAVITOSLAMROTATE_H
#define HJ_INTERFACE_MESSAGE_NAVITOSLAMROTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct NaviToSlamRotate_
{
  typedef NaviToSlamRotate_<ContainerAllocator> Type;

  NaviToSlamRotate_()
    : timestamp()
    , navi_mode(0)
    , rotate_state(0)  {
    }
  NaviToSlamRotate_(const ContainerAllocator& _alloc)
    : timestamp()
    , navi_mode(0)
    , rotate_state(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _navi_mode_type;
  _navi_mode_type navi_mode;

   typedef uint8_t _rotate_state_type;
  _rotate_state_type rotate_state;





  typedef boost::shared_ptr< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> const> ConstPtr;

}; // struct NaviToSlamRotate_

typedef ::hj_interface::NaviToSlamRotate_<std::allocator<void> > NaviToSlamRotate;

typedef boost::shared_ptr< ::hj_interface::NaviToSlamRotate > NaviToSlamRotatePtr;
typedef boost::shared_ptr< ::hj_interface::NaviToSlamRotate const> NaviToSlamRotateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::NaviToSlamRotate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::NaviToSlamRotate_<ContainerAllocator1> & lhs, const ::hj_interface::NaviToSlamRotate_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.navi_mode == rhs.navi_mode &&
    lhs.rotate_state == rhs.rotate_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::NaviToSlamRotate_<ContainerAllocator1> & lhs, const ::hj_interface::NaviToSlamRotate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "439cad0e7c2aeed865c50a7d5d5584f1";
  }

  static const char* value(const ::hj_interface::NaviToSlamRotate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x439cad0e7c2aeed8ULL;
  static const uint64_t static_value2 = 0x65c50a7d5d5584f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/NaviToSlamRotate";
  }

  static const char* value(const ::hj_interface::NaviToSlamRotate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n"
"uint8 navi_mode      #!< 机器工作模式    0:池底, 1:水面\n"
"uint8 rotate_state   #!< 导航旋转状态    0:其他, 1:旋转开始 2:旋转结束\n"
;
  }

  static const char* value(const ::hj_interface::NaviToSlamRotate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.navi_mode);
      stream.next(m.rotate_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NaviToSlamRotate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::NaviToSlamRotate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::NaviToSlamRotate_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "navi_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navi_mode);
    s << indent << "rotate_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotate_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_NAVITOSLAMROTATE_H
