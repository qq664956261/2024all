// Generated by gencpp from file hj_interface/ElecMotorCur.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_ELECMOTORCUR_H
#define HJ_INTERFACE_MESSAGE_ELECMOTORCUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct ElecMotorCur_
{
  typedef ElecMotorCur_<ContainerAllocator> Type;

  ElecMotorCur_()
    : custom_time()
    , motor_l(0)
    , motor_r(0)
    , pump_l(0)
    , pump_r(0)
    , turn(0)
    , dirtybox(0)
    , flipcover(0)
    , airbag(0)  {
    }
  ElecMotorCur_(const ContainerAllocator& _alloc)
    : custom_time()
    , motor_l(0)
    , motor_r(0)
    , pump_l(0)
    , pump_r(0)
    , turn(0)
    , dirtybox(0)
    , flipcover(0)
    , airbag(0)  {
  (void)_alloc;
    }



   typedef ros::Time _custom_time_type;
  _custom_time_type custom_time;

   typedef uint16_t _motor_l_type;
  _motor_l_type motor_l;

   typedef uint16_t _motor_r_type;
  _motor_r_type motor_r;

   typedef uint16_t _pump_l_type;
  _pump_l_type pump_l;

   typedef uint16_t _pump_r_type;
  _pump_r_type pump_r;

   typedef uint16_t _turn_type;
  _turn_type turn;

   typedef uint16_t _dirtybox_type;
  _dirtybox_type dirtybox;

   typedef uint16_t _flipcover_type;
  _flipcover_type flipcover;

   typedef uint16_t _airbag_type;
  _airbag_type airbag;





  typedef boost::shared_ptr< ::hj_interface::ElecMotorCur_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::ElecMotorCur_<ContainerAllocator> const> ConstPtr;

}; // struct ElecMotorCur_

typedef ::hj_interface::ElecMotorCur_<std::allocator<void> > ElecMotorCur;

typedef boost::shared_ptr< ::hj_interface::ElecMotorCur > ElecMotorCurPtr;
typedef boost::shared_ptr< ::hj_interface::ElecMotorCur const> ElecMotorCurConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::ElecMotorCur_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::ElecMotorCur_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::ElecMotorCur_<ContainerAllocator1> & lhs, const ::hj_interface::ElecMotorCur_<ContainerAllocator2> & rhs)
{
  return lhs.custom_time == rhs.custom_time &&
    lhs.motor_l == rhs.motor_l &&
    lhs.motor_r == rhs.motor_r &&
    lhs.pump_l == rhs.pump_l &&
    lhs.pump_r == rhs.pump_r &&
    lhs.turn == rhs.turn &&
    lhs.dirtybox == rhs.dirtybox &&
    lhs.flipcover == rhs.flipcover &&
    lhs.airbag == rhs.airbag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::ElecMotorCur_<ContainerAllocator1> & lhs, const ::hj_interface::ElecMotorCur_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::ElecMotorCur_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::ElecMotorCur_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::ElecMotorCur_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea5172ded50d937bdf2d9c842bf711d0";
  }

  static const char* value(const ::hj_interface::ElecMotorCur_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea5172ded50d937bULL;
  static const uint64_t static_value2 = 0xdf2d9c842bf711d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/ElecMotorCur";
  }

  static const char* value(const ::hj_interface::ElecMotorCur_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time custom_time\n"
"uint16 motor_l\n"
"uint16 motor_r\n"
"uint16 pump_l\n"
"uint16 pump_r\n"
"uint16 turn\n"
"uint16 dirtybox\n"
"uint16 flipcover\n"
"uint16 airbag\n"
;
  }

  static const char* value(const ::hj_interface::ElecMotorCur_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.custom_time);
      stream.next(m.motor_l);
      stream.next(m.motor_r);
      stream.next(m.pump_l);
      stream.next(m.pump_r);
      stream.next(m.turn);
      stream.next(m.dirtybox);
      stream.next(m.flipcover);
      stream.next(m.airbag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElecMotorCur_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::ElecMotorCur_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::ElecMotorCur_<ContainerAllocator>& v)
  {
    s << indent << "custom_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.custom_time);
    s << indent << "motor_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_l);
    s << indent << "motor_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_r);
    s << indent << "pump_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pump_l);
    s << indent << "pump_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pump_r);
    s << indent << "turn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.turn);
    s << indent << "dirtybox: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dirtybox);
    s << indent << "flipcover: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flipcover);
    s << indent << "airbag: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.airbag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_ELECMOTORCUR_H
