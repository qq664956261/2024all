// Generated by gencpp from file hj_interface/Atime.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_ATIME_H
#define HJ_INTERFACE_MESSAGE_ATIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Atime_
{
  typedef Atime_<ContainerAllocator> Type;

  Atime_()
    : timestamp_current()
    , timestamp_origin()
    , index(0)
    , flag(0)  {
    }
  Atime_(const ContainerAllocator& _alloc)
    : timestamp_current()
    , timestamp_origin()
    , index(0)
    , flag(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_current_type;
  _timestamp_current_type timestamp_current;

   typedef ros::Time _timestamp_origin_type;
  _timestamp_origin_type timestamp_origin;

   typedef uint64_t _index_type;
  _index_type index;

   typedef uint8_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::hj_interface::Atime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Atime_<ContainerAllocator> const> ConstPtr;

}; // struct Atime_

typedef ::hj_interface::Atime_<std::allocator<void> > Atime;

typedef boost::shared_ptr< ::hj_interface::Atime > AtimePtr;
typedef boost::shared_ptr< ::hj_interface::Atime const> AtimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Atime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Atime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Atime_<ContainerAllocator1> & lhs, const ::hj_interface::Atime_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_current == rhs.timestamp_current &&
    lhs.timestamp_origin == rhs.timestamp_origin &&
    lhs.index == rhs.index &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Atime_<ContainerAllocator1> & lhs, const ::hj_interface::Atime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Atime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Atime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Atime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Atime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Atime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Atime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Atime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "410667780c68e1da657f337761c80ef9";
  }

  static const char* value(const ::hj_interface::Atime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x410667780c68e1daULL;
  static const uint64_t static_value2 = 0x657f337761c80ef9ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Atime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Atime";
  }

  static const char* value(const ::hj_interface::Atime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Atime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp_current  #!< 时间戳，单位us\n"
"time timestamp_origin #!< 时间戳，单位us\n"
"uint64 index\n"
"uint8 flag\n"
;
  }

  static const char* value(const ::hj_interface::Atime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Atime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_current);
      stream.next(m.timestamp_origin);
      stream.next(m.index);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Atime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Atime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Atime_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_current: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp_current);
    s << indent << "timestamp_origin: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp_origin);
    s << indent << "index: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.index);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_ATIME_H
