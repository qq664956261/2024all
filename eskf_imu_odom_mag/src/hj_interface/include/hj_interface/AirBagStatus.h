// Generated by gencpp from file hj_interface/AirBagStatus.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_AIRBAGSTATUS_H
#define HJ_INTERFACE_MESSAGE_AIRBAGSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct AirBagStatus_
{
  typedef AirBagStatus_<ContainerAllocator> Type;

  AirBagStatus_()
    : status(0)
    , left(0)  {
    }
  AirBagStatus_(const ContainerAllocator& _alloc)
    : status(0)
    , left(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint16_t _left_type;
  _left_type left;





  typedef boost::shared_ptr< ::hj_interface::AirBagStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::AirBagStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AirBagStatus_

typedef ::hj_interface::AirBagStatus_<std::allocator<void> > AirBagStatus;

typedef boost::shared_ptr< ::hj_interface::AirBagStatus > AirBagStatusPtr;
typedef boost::shared_ptr< ::hj_interface::AirBagStatus const> AirBagStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::AirBagStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::AirBagStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::AirBagStatus_<ContainerAllocator1> & lhs, const ::hj_interface::AirBagStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.left == rhs.left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::AirBagStatus_<ContainerAllocator1> & lhs, const ::hj_interface::AirBagStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AirBagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AirBagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AirBagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AirBagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AirBagStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AirBagStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::AirBagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8708fa1256e9453e51c48492cef4495";
  }

  static const char* value(const ::hj_interface::AirBagStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8708fa1256e9453ULL;
  static const uint64_t static_value2 = 0xe51c48492cef4495ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::AirBagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/AirBagStatus";
  }

  static const char* value(const ::hj_interface::AirBagStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::AirBagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  status   #状态  0关闭， 1充气， 2放气\n"
"uint16 left     #剩余秒数\n"
;
  }

  static const char* value(const ::hj_interface::AirBagStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::AirBagStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AirBagStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::AirBagStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::AirBagStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_AIRBAGSTATUS_H
