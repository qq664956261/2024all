// Generated by gencpp from file hj_interface/StateDeal.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_STATEDEAL_H
#define HJ_INTERFACE_MESSAGE_STATEDEAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/UploadIot.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct StateDeal_
{
  typedef StateDeal_<ContainerAllocator> Type;

  StateDeal_()
    : state()  {
    }
  StateDeal_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::hj_interface::UploadIot_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hj_interface::UploadIot_<ContainerAllocator> >> _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::hj_interface::StateDeal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::StateDeal_<ContainerAllocator> const> ConstPtr;

}; // struct StateDeal_

typedef ::hj_interface::StateDeal_<std::allocator<void> > StateDeal;

typedef boost::shared_ptr< ::hj_interface::StateDeal > StateDealPtr;
typedef boost::shared_ptr< ::hj_interface::StateDeal const> StateDealConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::StateDeal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::StateDeal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::StateDeal_<ContainerAllocator1> & lhs, const ::hj_interface::StateDeal_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::StateDeal_<ContainerAllocator1> & lhs, const ::hj_interface::StateDeal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::StateDeal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::StateDeal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::StateDeal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::StateDeal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::StateDeal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::StateDeal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::StateDeal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5b360c206213a7fff42e4c799d9b81b";
  }

  static const char* value(const ::hj_interface::StateDeal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5b360c206213a7fULL;
  static const uint64_t static_value2 = 0xff42e4c799d9b81bULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::StateDeal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/StateDeal";
  }

  static const char* value(const ::hj_interface::StateDeal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::StateDeal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "UploadIot[] state \n"
"================================================================================\n"
"MSG: hj_interface/UploadIot\n"
"time   timestamp   #!< 时间戳, 单位us\n"
"uint32 code_val    #!< 错误码, enum值\n"
"\n"
"uint8  status        #!< 错误程度, enum值\n"
"uint8 FAILED  = 1    # 致命错误\n"
"uint8 ERROR   = 2    # 一般错误\n"
"uint8 WARNING = 3    # 警告\n"
"uint8 NORMAL  = 4    # 正常\n"
;
  }

  static const char* value(const ::hj_interface::StateDeal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::StateDeal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateDeal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::StateDeal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::StateDeal_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hj_interface::UploadIot_<ContainerAllocator> >::stream(s, indent + "    ", v.state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_STATEDEAL_H
