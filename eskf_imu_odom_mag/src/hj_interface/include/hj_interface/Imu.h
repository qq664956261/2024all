// Generated by gencpp from file hj_interface/Imu.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_IMU_H
#define HJ_INTERFACE_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Imu_
{
  typedef Imu_<ContainerAllocator> Type;

  Imu_()
    : custom_time()
    , roll(0)
    , pitch(0)
    , yaw(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , accel_x(0)
    , accel_y(0)
    , accel_z(0)
    , flag(0)
    , index(0)  {
    }
  Imu_(const ContainerAllocator& _alloc)
    : custom_time()
    , roll(0)
    , pitch(0)
    , yaw(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , accel_x(0)
    , accel_y(0)
    , accel_z(0)
    , flag(0)
    , index(0)  {
  (void)_alloc;
    }



   typedef ros::Time _custom_time_type;
  _custom_time_type custom_time;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef int16_t _yaw_type;
  _yaw_type yaw;

   typedef int16_t _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef int16_t _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef int16_t _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef int16_t _accel_x_type;
  _accel_x_type accel_x;

   typedef int16_t _accel_y_type;
  _accel_y_type accel_y;

   typedef int16_t _accel_z_type;
  _accel_z_type accel_z;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef uint64_t _index_type;
  _index_type index;





  typedef boost::shared_ptr< ::hj_interface::Imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Imu_<ContainerAllocator> const> ConstPtr;

}; // struct Imu_

typedef ::hj_interface::Imu_<std::allocator<void> > Imu;

typedef boost::shared_ptr< ::hj_interface::Imu > ImuPtr;
typedef boost::shared_ptr< ::hj_interface::Imu const> ImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Imu_<ContainerAllocator1> & lhs, const ::hj_interface::Imu_<ContainerAllocator2> & rhs)
{
  return lhs.custom_time == rhs.custom_time &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z &&
    lhs.flag == rhs.flag &&
    lhs.index == rhs.index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Imu_<ContainerAllocator1> & lhs, const ::hj_interface::Imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fb0c67f020ea48dbb07fa5efabb5fc9";
  }

  static const char* value(const ::hj_interface::Imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fb0c67f020ea48dULL;
  static const uint64_t static_value2 = 0xbb07fa5efabb5fc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Imu";
  }

  static const char* value(const ::hj_interface::Imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time custom_time\n"
"int16 roll\n"
"int16 pitch\n"
"int16 yaw\n"
"int16 gyro_x\n"
"int16 gyro_y\n"
"int16 gyro_z\n"
"int16 accel_x\n"
"int16 accel_y\n"
"int16 accel_z\n"
"uint8 flag    # 自校准状态：[0x00]未进入；[0x01]已进入\n"
"uint64 index\n"
;
  }

  static const char* value(const ::hj_interface::Imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.custom_time);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.flag);
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Imu_<ContainerAllocator>& v)
  {
    s << indent << "custom_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.custom_time);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "gyro_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "accel_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accel_z);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "index: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_IMU_H
