// Generated by gencpp from file hj_interface/SocImu.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_SOCIMU_H
#define HJ_INTERFACE_MESSAGE_SOCIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct SocImu_
{
  typedef SocImu_<ContainerAllocator> Type;

  SocImu_()
    : timestamp()
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)  {
    }
  SocImu_(const ContainerAllocator& _alloc)
    : timestamp()
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef float _accel_x_type;
  _accel_x_type accel_x;

   typedef float _accel_y_type;
  _accel_y_type accel_y;

   typedef float _accel_z_type;
  _accel_z_type accel_z;





  typedef boost::shared_ptr< ::hj_interface::SocImu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::SocImu_<ContainerAllocator> const> ConstPtr;

}; // struct SocImu_

typedef ::hj_interface::SocImu_<std::allocator<void> > SocImu;

typedef boost::shared_ptr< ::hj_interface::SocImu > SocImuPtr;
typedef boost::shared_ptr< ::hj_interface::SocImu const> SocImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::SocImu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::SocImu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::SocImu_<ContainerAllocator1> & lhs, const ::hj_interface::SocImu_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::SocImu_<ContainerAllocator1> & lhs, const ::hj_interface::SocImu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SocImu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SocImu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SocImu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SocImu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SocImu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SocImu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::SocImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21ed055e4605664acda549d79735a465";
  }

  static const char* value(const ::hj_interface::SocImu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21ed055e4605664aULL;
  static const uint64_t static_value2 = 0xcda549d79735a465ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::SocImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/SocImu";
  }

  static const char* value(const ::hj_interface::SocImu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::SocImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n"
"float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"float32 accel_x\n"
"float32 accel_y\n"
"float32 accel_z\n"
;
  }

  static const char* value(const ::hj_interface::SocImu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::SocImu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SocImu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::SocImu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::SocImu_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "accel_x: ";
    Printer<float>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<float>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<float>::stream(s, indent + "  ", v.accel_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_SOCIMU_H
