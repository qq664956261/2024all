// Generated by gencpp from file hj_interface/Bat.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_BAT_H
#define HJ_INTERFACE_MESSAGE_BAT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Bat_
{
  typedef Bat_<ContainerAllocator> Type;

  Bat_()
    : vol(0)
    , ch_vol(0)
    , cur(0)
    , power(0)
    , temperature(0)  {
    }
  Bat_(const ContainerAllocator& _alloc)
    : vol(0)
    , ch_vol(0)
    , cur(0)
    , power(0)
    , temperature(0)  {
  (void)_alloc;
    }



   typedef uint16_t _vol_type;
  _vol_type vol;

   typedef uint16_t _ch_vol_type;
  _ch_vol_type ch_vol;

   typedef int16_t _cur_type;
  _cur_type cur;

   typedef uint8_t _power_type;
  _power_type power;

   typedef int16_t _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::hj_interface::Bat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Bat_<ContainerAllocator> const> ConstPtr;

}; // struct Bat_

typedef ::hj_interface::Bat_<std::allocator<void> > Bat;

typedef boost::shared_ptr< ::hj_interface::Bat > BatPtr;
typedef boost::shared_ptr< ::hj_interface::Bat const> BatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Bat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Bat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Bat_<ContainerAllocator1> & lhs, const ::hj_interface::Bat_<ContainerAllocator2> & rhs)
{
  return lhs.vol == rhs.vol &&
    lhs.ch_vol == rhs.ch_vol &&
    lhs.cur == rhs.cur &&
    lhs.power == rhs.power &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Bat_<ContainerAllocator1> & lhs, const ::hj_interface::Bat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Bat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Bat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Bat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Bat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Bat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Bat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "767adf0ab14ff9bd8605abb0c5fb3f5b";
  }

  static const char* value(const ::hj_interface::Bat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x767adf0ab14ff9bdULL;
  static const uint64_t static_value2 = 0x8605abb0c5fb3f5bULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Bat";
  }

  static const char* value(const ::hj_interface::Bat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 vol\n"
"uint16 ch_vol\n"
"int16 cur\n"
"uint8 power\n"
"int16 temperature\n"
;
  }

  static const char* value(const ::hj_interface::Bat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Bat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vol);
      stream.next(m.ch_vol);
      stream.next(m.cur);
      stream.next(m.power);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Bat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Bat_<ContainerAllocator>& v)
  {
    s << indent << "vol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vol);
    s << indent << "ch_vol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch_vol);
    s << indent << "cur: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cur);
    s << indent << "power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power);
    s << indent << "temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_BAT_H
