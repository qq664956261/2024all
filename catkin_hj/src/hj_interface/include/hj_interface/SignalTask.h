// Generated by gencpp from file hj_interface/SignalTask.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_SIGNALTASK_H
#define HJ_INTERFACE_MESSAGE_SIGNALTASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/CleanAreas.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct SignalTask_
{
  typedef SignalTask_<ContainerAllocator> Type;

  SignalTask_()
    : task_type(0)
    , operate(0)
    , overrideID()
    , name_id()
    , start_time()
    , start_time_stamp()
    , clean_time(0)
    , clean_areas()
    , clean_mode(0)  {
    }
  SignalTask_(const ContainerAllocator& _alloc)
    : task_type(0)
    , operate(0)
    , overrideID(_alloc)
    , name_id(_alloc)
    , start_time(_alloc)
    , start_time_stamp()
    , clean_time(0)
    , clean_areas(_alloc)
    , clean_mode(0)  {
  (void)_alloc;
    }



   typedef int32_t _task_type_type;
  _task_type_type task_type;

   typedef int32_t _operate_type;
  _operate_type operate;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _overrideID_type;
  _overrideID_type overrideID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_id_type;
  _name_id_type name_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _start_time_type;
  _start_time_type start_time;

   typedef ros::Time _start_time_stamp_type;
  _start_time_stamp_type start_time_stamp;

   typedef int32_t _clean_time_type;
  _clean_time_type clean_time;

   typedef std::vector< ::hj_interface::CleanAreas_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hj_interface::CleanAreas_<ContainerAllocator> >> _clean_areas_type;
  _clean_areas_type clean_areas;

   typedef int32_t _clean_mode_type;
  _clean_mode_type clean_mode;





  typedef boost::shared_ptr< ::hj_interface::SignalTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::SignalTask_<ContainerAllocator> const> ConstPtr;

}; // struct SignalTask_

typedef ::hj_interface::SignalTask_<std::allocator<void> > SignalTask;

typedef boost::shared_ptr< ::hj_interface::SignalTask > SignalTaskPtr;
typedef boost::shared_ptr< ::hj_interface::SignalTask const> SignalTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::SignalTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::SignalTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::SignalTask_<ContainerAllocator1> & lhs, const ::hj_interface::SignalTask_<ContainerAllocator2> & rhs)
{
  return lhs.task_type == rhs.task_type &&
    lhs.operate == rhs.operate &&
    lhs.overrideID == rhs.overrideID &&
    lhs.name_id == rhs.name_id &&
    lhs.start_time == rhs.start_time &&
    lhs.start_time_stamp == rhs.start_time_stamp &&
    lhs.clean_time == rhs.clean_time &&
    lhs.clean_areas == rhs.clean_areas &&
    lhs.clean_mode == rhs.clean_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::SignalTask_<ContainerAllocator1> & lhs, const ::hj_interface::SignalTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SignalTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::SignalTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SignalTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::SignalTask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SignalTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::SignalTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::SignalTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac67a97ced053e0eda7d322364fa5422";
  }

  static const char* value(const ::hj_interface::SignalTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac67a97ced053e0eULL;
  static const uint64_t static_value2 = 0xda7d322364fa5422ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::SignalTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/SignalTask";
  }

  static const char* value(const ::hj_interface::SignalTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::SignalTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_type    #0-快速任务 1-计时任务 2-周期任务 3-手动任务\n"
"int32 operate      #0-增加任务 1-覆盖任务\n"
"string overrideID  #表示要覆盖的任务的名称\n"
"string name_id\n"
"string start_time\n"
"time start_time_stamp\n"
"int32 clean_time   # minutes\n"
"CleanAreas[] clean_areas\n"
"int32 clean_mode   # 1-变频 2-标准\n"
"================================================================================\n"
"MSG: hj_interface/CleanAreas\n"
"int32 clean_area  #清扫区域 1-水面 2-池底 3-池壁\n"
"int32 count       #清扫次数\n"
"int32 time        #清扫时间单位分钟\n"
;
  }

  static const char* value(const ::hj_interface::SignalTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::SignalTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_type);
      stream.next(m.operate);
      stream.next(m.overrideID);
      stream.next(m.name_id);
      stream.next(m.start_time);
      stream.next(m.start_time_stamp);
      stream.next(m.clean_time);
      stream.next(m.clean_areas);
      stream.next(m.clean_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::SignalTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::SignalTask_<ContainerAllocator>& v)
  {
    s << indent << "task_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_type);
    s << indent << "operate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.operate);
    s << indent << "overrideID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.overrideID);
    s << indent << "name_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name_id);
    s << indent << "start_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.start_time);
    s << indent << "start_time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time_stamp);
    s << indent << "clean_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.clean_time);
    s << indent << "clean_areas[]" << std::endl;
    for (size_t i = 0; i < v.clean_areas.size(); ++i)
    {
      s << indent << "  clean_areas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hj_interface::CleanAreas_<ContainerAllocator> >::stream(s, indent + "    ", v.clean_areas[i]);
    }
    s << indent << "clean_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.clean_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_SIGNALTASK_H
