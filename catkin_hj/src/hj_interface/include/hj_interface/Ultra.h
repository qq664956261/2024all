// Generated by gencpp from file hj_interface/Ultra.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_ULTRA_H
#define HJ_INTERFACE_MESSAGE_ULTRA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Ultra_
{
  typedef Ultra_<ContainerAllocator> Type;

  Ultra_()
    : timestamp()
    , front_l(0)
    , front_m(0)
    , front_r(0)
    , mid(0)
    , back(0)
    , id(0)  {
    }
  Ultra_(const ContainerAllocator& _alloc)
    : timestamp()
    , front_l(0)
    , front_m(0)
    , front_r(0)
    , mid(0)
    , back(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _front_l_type;
  _front_l_type front_l;

   typedef uint32_t _front_m_type;
  _front_m_type front_m;

   typedef uint32_t _front_r_type;
  _front_r_type front_r;

   typedef uint32_t _mid_type;
  _mid_type mid;

   typedef uint32_t _back_type;
  _back_type back;

   typedef uint8_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::hj_interface::Ultra_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Ultra_<ContainerAllocator> const> ConstPtr;

}; // struct Ultra_

typedef ::hj_interface::Ultra_<std::allocator<void> > Ultra;

typedef boost::shared_ptr< ::hj_interface::Ultra > UltraPtr;
typedef boost::shared_ptr< ::hj_interface::Ultra const> UltraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Ultra_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Ultra_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Ultra_<ContainerAllocator1> & lhs, const ::hj_interface::Ultra_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.front_l == rhs.front_l &&
    lhs.front_m == rhs.front_m &&
    lhs.front_r == rhs.front_r &&
    lhs.mid == rhs.mid &&
    lhs.back == rhs.back &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Ultra_<ContainerAllocator1> & lhs, const ::hj_interface::Ultra_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Ultra_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Ultra_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Ultra_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Ultra_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Ultra_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Ultra_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Ultra_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adc71b4a8c91deb8ea0080078f038834";
  }

  static const char* value(const ::hj_interface::Ultra_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadc71b4a8c91deb8ULL;
  static const uint64_t static_value2 = 0xea0080078f038834ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Ultra_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Ultra";
  }

  static const char* value(const ::hj_interface::Ultra_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Ultra_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp \n"
"uint32 front_l \n"
"uint32 front_m\n"
"uint32 front_r\n"
"uint32 mid\n"
"uint32 back\n"
"uint8 id #!< 超声波id,0 means front,1 means mid,2 means back\n"
;
  }

  static const char* value(const ::hj_interface::Ultra_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Ultra_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.front_l);
      stream.next(m.front_m);
      stream.next(m.front_r);
      stream.next(m.mid);
      stream.next(m.back);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ultra_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Ultra_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Ultra_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "front_l: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.front_l);
    s << indent << "front_m: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.front_m);
    s << indent << "front_r: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.front_r);
    s << indent << "mid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mid);
    s << indent << "back: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.back);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_ULTRA_H
