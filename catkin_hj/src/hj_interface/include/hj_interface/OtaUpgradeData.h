// Generated by gencpp from file hj_interface/OtaUpgradeData.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_OTAUPGRADEDATA_H
#define HJ_INTERFACE_MESSAGE_OTAUPGRADEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/subPackData.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct OtaUpgradeData_
{
  typedef OtaUpgradeData_<ContainerAllocator> Type;

  OtaUpgradeData_()
    : todo()
    , stage(0)
    , module(0)
    , data()  {
    }
  OtaUpgradeData_(const ContainerAllocator& _alloc)
    : todo(_alloc)
    , stage(0)
    , module(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _todo_type;
  _todo_type todo;

   typedef int32_t _stage_type;
  _stage_type stage;

   typedef int32_t _module_type;
  _module_type module;

   typedef  ::hj_interface::subPackData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::hj_interface::OtaUpgradeData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::OtaUpgradeData_<ContainerAllocator> const> ConstPtr;

}; // struct OtaUpgradeData_

typedef ::hj_interface::OtaUpgradeData_<std::allocator<void> > OtaUpgradeData;

typedef boost::shared_ptr< ::hj_interface::OtaUpgradeData > OtaUpgradeDataPtr;
typedef boost::shared_ptr< ::hj_interface::OtaUpgradeData const> OtaUpgradeDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::OtaUpgradeData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::OtaUpgradeData_<ContainerAllocator1> & lhs, const ::hj_interface::OtaUpgradeData_<ContainerAllocator2> & rhs)
{
  return lhs.todo == rhs.todo &&
    lhs.stage == rhs.stage &&
    lhs.module == rhs.module &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::OtaUpgradeData_<ContainerAllocator1> & lhs, const ::hj_interface::OtaUpgradeData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaUpgradeData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaUpgradeData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaUpgradeData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf34e244f7cadb161b4fabd080ab378c";
  }

  static const char* value(const ::hj_interface::OtaUpgradeData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf34e244f7cadb16ULL;
  static const uint64_t static_value2 = 0x1b4fabd080ab378cULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/OtaUpgradeData";
  }

  static const char* value(const ::hj_interface::OtaUpgradeData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string      todo   # 当前操作为OTA升级 UpdateOTA: ota升级 Reboot: 机器重启\n"
"int32       stage  # 0 下载 1 升级\n"
"int32       module # 1 mcu 2 power 3 core 注: stage=1时 关注此字段\n"
"subPackData data   # 固件包子包的地址和md5\n"
"================================================================================\n"
"MSG: hj_interface/subPackData\n"
"string addr # 子固件包的存放位置\n"
"string ver  # 子固件包的版本号\n"
;
  }

  static const char* value(const ::hj_interface::OtaUpgradeData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.todo);
      stream.next(m.stage);
      stream.next(m.module);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OtaUpgradeData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::OtaUpgradeData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::OtaUpgradeData_<ContainerAllocator>& v)
  {
    s << indent << "todo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.todo);
    s << indent << "stage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stage);
    s << indent << "module: ";
    Printer<int32_t>::stream(s, indent + "  ", v.module);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::hj_interface::subPackData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_OTAUPGRADEDATA_H
