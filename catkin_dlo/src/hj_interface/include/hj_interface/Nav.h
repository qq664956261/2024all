// Generated by gencpp from file hj_interface/Nav.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_NAV_H
#define HJ_INTERFACE_MESSAGE_NAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Nav_
{
  typedef Nav_<ContainerAllocator> Type;

  Nav_()
    : custom_time()
    , left_msg(0.0)
    , right_msg(0.0)
    , pump_a(0.0)
    , pump_b(0.0)  {
    }
  Nav_(const ContainerAllocator& _alloc)
    : custom_time()
    , left_msg(0.0)
    , right_msg(0.0)
    , pump_a(0.0)
    , pump_b(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _custom_time_type;
  _custom_time_type custom_time;

   typedef float _left_msg_type;
  _left_msg_type left_msg;

   typedef float _right_msg_type;
  _right_msg_type right_msg;

   typedef float _pump_a_type;
  _pump_a_type pump_a;

   typedef float _pump_b_type;
  _pump_b_type pump_b;





  typedef boost::shared_ptr< ::hj_interface::Nav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Nav_<ContainerAllocator> const> ConstPtr;

}; // struct Nav_

typedef ::hj_interface::Nav_<std::allocator<void> > Nav;

typedef boost::shared_ptr< ::hj_interface::Nav > NavPtr;
typedef boost::shared_ptr< ::hj_interface::Nav const> NavConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Nav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Nav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Nav_<ContainerAllocator1> & lhs, const ::hj_interface::Nav_<ContainerAllocator2> & rhs)
{
  return lhs.custom_time == rhs.custom_time &&
    lhs.left_msg == rhs.left_msg &&
    lhs.right_msg == rhs.right_msg &&
    lhs.pump_a == rhs.pump_a &&
    lhs.pump_b == rhs.pump_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Nav_<ContainerAllocator1> & lhs, const ::hj_interface::Nav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Nav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Nav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Nav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Nav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Nav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Nav_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd67e180883d4e466346385259ba6618";
  }

  static const char* value(const ::hj_interface::Nav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd67e180883d4e46ULL;
  static const uint64_t static_value2 = 0x6346385259ba6618ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Nav";
  }

  static const char* value(const ::hj_interface::Nav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time custom_time\n"
"float32 left_msg\n"
"float32 right_msg\n"
"float32 pump_a\n"
"float32 pump_b\n"
;
  }

  static const char* value(const ::hj_interface::Nav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Nav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.custom_time);
      stream.next(m.left_msg);
      stream.next(m.right_msg);
      stream.next(m.pump_a);
      stream.next(m.pump_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Nav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Nav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Nav_<ContainerAllocator>& v)
  {
    s << indent << "custom_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.custom_time);
    s << indent << "left_msg: ";
    Printer<float>::stream(s, indent + "  ", v.left_msg);
    s << indent << "right_msg: ";
    Printer<float>::stream(s, indent + "  ", v.right_msg);
    s << indent << "pump_a: ";
    Printer<float>::stream(s, indent + "  ", v.pump_a);
    s << indent << "pump_b: ";
    Printer<float>::stream(s, indent + "  ", v.pump_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_NAV_H
