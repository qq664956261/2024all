// Generated by gencpp from file hj_interface/UploadIot.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_UPLOADIOT_H
#define HJ_INTERFACE_MESSAGE_UPLOADIOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct UploadIot_
{
  typedef UploadIot_<ContainerAllocator> Type;

  UploadIot_()
    : timestamp()
    , code_val(0)
    , status(0)  {
    }
  UploadIot_(const ContainerAllocator& _alloc)
    : timestamp()
    , code_val(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _code_val_type;
  _code_val_type code_val;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FAILED)
  #undef FAILED
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(WARNING)
  #undef WARNING
#endif
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif

  enum {
    FAILED = 1u,
    ERROR = 2u,
    WARNING = 3u,
    NORMAL = 4u,
  };


  typedef boost::shared_ptr< ::hj_interface::UploadIot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::UploadIot_<ContainerAllocator> const> ConstPtr;

}; // struct UploadIot_

typedef ::hj_interface::UploadIot_<std::allocator<void> > UploadIot;

typedef boost::shared_ptr< ::hj_interface::UploadIot > UploadIotPtr;
typedef boost::shared_ptr< ::hj_interface::UploadIot const> UploadIotConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::UploadIot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::UploadIot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::UploadIot_<ContainerAllocator1> & lhs, const ::hj_interface::UploadIot_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.code_val == rhs.code_val &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::UploadIot_<ContainerAllocator1> & lhs, const ::hj_interface::UploadIot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::UploadIot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::UploadIot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::UploadIot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::UploadIot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::UploadIot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::UploadIot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::UploadIot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdbbf36d412f43a626768d6f424a1d73";
  }

  static const char* value(const ::hj_interface::UploadIot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdbbf36d412f43a6ULL;
  static const uint64_t static_value2 = 0x26768d6f424a1d73ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::UploadIot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/UploadIot";
  }

  static const char* value(const ::hj_interface::UploadIot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::UploadIot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time   timestamp   #!< 时间戳, 单位us\n"
"uint32 code_val    #!< 错误码, enum值\n"
"\n"
"uint8  status        #!< 错误程度, enum值\n"
"uint8 FAILED  = 1    # 致命错误\n"
"uint8 ERROR   = 2    # 一般错误\n"
"uint8 WARNING = 3    # 警告\n"
"uint8 NORMAL  = 4    # 正常\n"
;
  }

  static const char* value(const ::hj_interface::UploadIot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::UploadIot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.code_val);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UploadIot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::UploadIot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::UploadIot_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "code_val: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.code_val);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_UPLOADIOT_H
