// Generated by gencpp from file hj_interface/Kbd.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_KBD_H
#define HJ_INTERFACE_MESSAGE_KBD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct Kbd_
{
  typedef Kbd_<ContainerAllocator> Type;

  Kbd_()
    : type(0)
    , left_msg(0)
    , right_msg(0)
    , turn_motor_status(0)
    , turn_motor_l(0)
    , turn_motor_r(0)
    , pump_status(0)
    , pump_speed(0)
    , airbag_status(0)
    , airbag_time(0)
    , fan_status(0)
    , flip_cover_angle(0)  {
    }
  Kbd_(const ContainerAllocator& _alloc)
    : type(0)
    , left_msg(0)
    , right_msg(0)
    , turn_motor_status(0)
    , turn_motor_l(0)
    , turn_motor_r(0)
    , pump_status(0)
    , pump_speed(0)
    , airbag_status(0)
    , airbag_time(0)
    , fan_status(0)
    , flip_cover_angle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef int32_t _left_msg_type;
  _left_msg_type left_msg;

   typedef int32_t _right_msg_type;
  _right_msg_type right_msg;

   typedef uint8_t _turn_motor_status_type;
  _turn_motor_status_type turn_motor_status;

   typedef int16_t _turn_motor_l_type;
  _turn_motor_l_type turn_motor_l;

   typedef int16_t _turn_motor_r_type;
  _turn_motor_r_type turn_motor_r;

   typedef uint8_t _pump_status_type;
  _pump_status_type pump_status;

   typedef uint8_t _pump_speed_type;
  _pump_speed_type pump_speed;

   typedef uint8_t _airbag_status_type;
  _airbag_status_type airbag_status;

   typedef uint16_t _airbag_time_type;
  _airbag_time_type airbag_time;

   typedef uint8_t _fan_status_type;
  _fan_status_type fan_status;

   typedef int16_t _flip_cover_angle_type;
  _flip_cover_angle_type flip_cover_angle;





  typedef boost::shared_ptr< ::hj_interface::Kbd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::Kbd_<ContainerAllocator> const> ConstPtr;

}; // struct Kbd_

typedef ::hj_interface::Kbd_<std::allocator<void> > Kbd;

typedef boost::shared_ptr< ::hj_interface::Kbd > KbdPtr;
typedef boost::shared_ptr< ::hj_interface::Kbd const> KbdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::Kbd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::Kbd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::Kbd_<ContainerAllocator1> & lhs, const ::hj_interface::Kbd_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.left_msg == rhs.left_msg &&
    lhs.right_msg == rhs.right_msg &&
    lhs.turn_motor_status == rhs.turn_motor_status &&
    lhs.turn_motor_l == rhs.turn_motor_l &&
    lhs.turn_motor_r == rhs.turn_motor_r &&
    lhs.pump_status == rhs.pump_status &&
    lhs.pump_speed == rhs.pump_speed &&
    lhs.airbag_status == rhs.airbag_status &&
    lhs.airbag_time == rhs.airbag_time &&
    lhs.fan_status == rhs.fan_status &&
    lhs.flip_cover_angle == rhs.flip_cover_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::Kbd_<ContainerAllocator1> & lhs, const ::hj_interface::Kbd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Kbd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::Kbd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Kbd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::Kbd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Kbd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::Kbd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::Kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb2a59634e6cf01d3ea8234234347fd8";
  }

  static const char* value(const ::hj_interface::Kbd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb2a59634e6cf01dULL;
  static const uint64_t static_value2 = 0x3ea8234234347fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::Kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/Kbd";
  }

  static const char* value(const ::hj_interface::Kbd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::Kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 type\n"
"int32 left_msg\n"
"int32 right_msg\n"
"\n"
"uint8 turn_motor_status     #!< 0 刹车； 1 运动； 2 滑行\n"
"int16 turn_motor_l      #!< 水面前进控制 喷口转向电机\n"
"int16 turn_motor_r      #!< 水面前进控制\n"
"\n"
"uint8 pump_status       #!< 0 刹车； 1 运行；水泵控制\n"
"uint8 pump_speed        #!< 占空比  0到100\n"
"\n"
"uint8 airbag_status     #!< 0 全放气； 1 全充气； 2 左充气； 3 右充气\n"
"uint16 airbag_time      #!< 充/放气时间  单位10ms\n"
"\n"
"uint8 fan_status        #!< 0 刹车； 1 运行； 自清洁电机,目前没有转速\n"
"\n"
"int16 flip_cover_angle     #!< 翻盖电机  位置  单位0.1度 上吸口开门\n"
;
  }

  static const char* value(const ::hj_interface::Kbd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::Kbd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.left_msg);
      stream.next(m.right_msg);
      stream.next(m.turn_motor_status);
      stream.next(m.turn_motor_l);
      stream.next(m.turn_motor_r);
      stream.next(m.pump_status);
      stream.next(m.pump_speed);
      stream.next(m.airbag_status);
      stream.next(m.airbag_time);
      stream.next(m.fan_status);
      stream.next(m.flip_cover_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Kbd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::Kbd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::Kbd_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "left_msg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_msg);
    s << indent << "right_msg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_msg);
    s << indent << "turn_motor_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_motor_status);
    s << indent << "turn_motor_l: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turn_motor_l);
    s << indent << "turn_motor_r: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turn_motor_r);
    s << indent << "pump_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pump_status);
    s << indent << "pump_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pump_speed);
    s << indent << "airbag_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.airbag_status);
    s << indent << "airbag_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.airbag_time);
    s << indent << "fan_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fan_status);
    s << indent << "flip_cover_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flip_cover_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_KBD_H
