// Generated by gencpp from file hj_interface/WorkResult.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_WORKRESULT_H
#define HJ_INTERFACE_MESSAGE_WORKRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct WorkResult_
{
  typedef WorkResult_<ContainerAllocator> Type;

  WorkResult_()
    : cmd(0)
    , errcode(0)
    , msg()  {
    }
  WorkResult_(const ContainerAllocator& _alloc)
    : cmd(0)
    , errcode(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef int32_t _errcode_type;
  _errcode_type errcode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::hj_interface::WorkResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::WorkResult_<ContainerAllocator> const> ConstPtr;

}; // struct WorkResult_

typedef ::hj_interface::WorkResult_<std::allocator<void> > WorkResult;

typedef boost::shared_ptr< ::hj_interface::WorkResult > WorkResultPtr;
typedef boost::shared_ptr< ::hj_interface::WorkResult const> WorkResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::WorkResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::WorkResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::WorkResult_<ContainerAllocator1> & lhs, const ::hj_interface::WorkResult_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.errcode == rhs.errcode &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::WorkResult_<ContainerAllocator1> & lhs, const ::hj_interface::WorkResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::WorkResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::WorkResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::WorkResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::WorkResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::WorkResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::WorkResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::WorkResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cdb9d46a26a18ee285d87f5565eed43";
  }

  static const char* value(const ::hj_interface::WorkResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cdb9d46a26a18eeULL;
  static const uint64_t static_value2 = 0x285d87f5565eed43ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::WorkResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/WorkResult";
  }

  static const char* value(const ::hj_interface::WorkResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::WorkResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd           # 1-水面 2-池底 3-池壁 \n"
"                    # 11-建图 12-定位  \n"
"                    # 21-召回 22-回充 \n"
"                    # 31-导航状态查询 32-清洁模式  \n"
"                    # 101-pause, 102-resume, 103-stop, 104-fail\n"
"int32 errcode       # error code - 任务失败填充这个错误码\n"
"string msg          # message - 有错误码可以不填这个msg\n"
;
  }

  static const char* value(const ::hj_interface::WorkResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::WorkResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.errcode);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorkResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::WorkResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::WorkResult_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "errcode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.errcode);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_WORKRESULT_H
