// Generated by gencpp from file hj_interface/AppData.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_APPDATA_H
#define HJ_INTERFACE_MESSAGE_APPDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct AppData_
{
  typedef AppData_<ContainerAllocator> Type;

  AppData_()
    : key()
    , payload()
    , res(0)  {
    }
  AppData_(const ContainerAllocator& _alloc)
    : key(_alloc)
    , payload(_alloc)
    , res(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _payload_type;
  _payload_type payload;

   typedef int8_t _res_type;
  _res_type res;





  typedef boost::shared_ptr< ::hj_interface::AppData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::AppData_<ContainerAllocator> const> ConstPtr;

}; // struct AppData_

typedef ::hj_interface::AppData_<std::allocator<void> > AppData;

typedef boost::shared_ptr< ::hj_interface::AppData > AppDataPtr;
typedef boost::shared_ptr< ::hj_interface::AppData const> AppDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::AppData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::AppData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::AppData_<ContainerAllocator1> & lhs, const ::hj_interface::AppData_<ContainerAllocator2> & rhs)
{
  return lhs.key == rhs.key &&
    lhs.payload == rhs.payload &&
    lhs.res == rhs.res;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::AppData_<ContainerAllocator1> & lhs, const ::hj_interface::AppData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AppData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AppData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AppData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AppData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AppData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AppData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::AppData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cbf7eae7132ccf7c0c40e1869621a3b";
  }

  static const char* value(const ::hj_interface::AppData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cbf7eae7132ccf7ULL;
  static const uint64_t static_value2 = 0xc0c40e1869621a3bULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::AppData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/AppData";
  }

  static const char* value(const ::hj_interface::AppData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::AppData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string key\n"
"string payload\n"
"int8  res    	#response code\n"
"\n"
;
  }

  static const char* value(const ::hj_interface::AppData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::AppData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
      stream.next(m.payload);
      stream.next(m.res);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AppData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::AppData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::AppData_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.key);
    s << indent << "payload: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.payload);
    s << indent << "res: ";
    Printer<int8_t>::stream(s, indent + "  ", v.res);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_APPDATA_H
