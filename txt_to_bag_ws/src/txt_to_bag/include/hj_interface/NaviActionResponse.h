// Generated by gencpp from file hj_interface/NaviActionResponse.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_NAVIACTIONRESPONSE_H
#define HJ_INTERFACE_MESSAGE_NAVIACTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/CleanRecord.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct NaviActionResponse_
{
  typedef NaviActionResponse_<ContainerAllocator> Type;

  NaviActionResponse_()
    : result(0)
    , CleanRecord()  {
    }
  NaviActionResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , CleanRecord(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef  ::hj_interface::CleanRecord_<ContainerAllocator>  _CleanRecord_type;
  _CleanRecord_type CleanRecord;





  typedef boost::shared_ptr< ::hj_interface::NaviActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::NaviActionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NaviActionResponse_

typedef ::hj_interface::NaviActionResponse_<std::allocator<void> > NaviActionResponse;

typedef boost::shared_ptr< ::hj_interface::NaviActionResponse > NaviActionResponsePtr;
typedef boost::shared_ptr< ::hj_interface::NaviActionResponse const> NaviActionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::NaviActionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::NaviActionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::NaviActionResponse_<ContainerAllocator1> & lhs, const ::hj_interface::NaviActionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.CleanRecord == rhs.CleanRecord;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::NaviActionResponse_<ContainerAllocator1> & lhs, const ::hj_interface::NaviActionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::NaviActionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::NaviActionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::NaviActionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f481e6349a18eec3f06d76918cbbc37f";
  }

  static const char* value(const ::hj_interface::NaviActionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf481e6349a18eec3ULL;
  static const uint64_t static_value2 = 0xf06d76918cbbc37fULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/NaviActionResponse";
  }

  static const char* value(const ::hj_interface::NaviActionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 result                # 0: 收到 \n"
"                            # 11: navi待机 12: navi清扫中\n"
"                            # 16：navi建图/重定位延边中 17：navi极限延边中\n"
"                            # 18：navi姿态调整中\n"
"                            # 21: navi召回中 22: navi回充中\n"
"CleanRecord CleanRecord     # 清扫记录\n"
"\n"
"================================================================================\n"
"MSG: hj_interface/CleanRecord\n"
"## 清洁日志消息\n"
"float32 clean_speed             # 清洁速度 单位：m/s\n"
"float32 surface_clean_area      # 清洁水面面积 单位：m2\n"
"float32 bottom_clean_area       # 清洁池底面积\n"
"float32 wall_clean_area         # 清洁池壁面积\n"
"float32 pool_area               # 泳池面积\n"
"float32 pool_volume             # 泳池体积\n"
"float32 pool_depth              # 泳池深度\n"
"int32   pool_shape              # 泳池形状\n"
"string map_line_file_path       # 地图轨迹文件路径\n"
"\n"
"## 清洁事件消息- 还有一部分放在清洁日志消息中\n"
"int32 start_turbidity          # 起始浊度\n"
"int32 end_turbidity            # 终止浊度\n"
"int32 build_map_faile_reson    # 地图构建失败原因\n"
"int32 build_map_fail_count     # 地图构建失败次数\n"
"int32 basket_block_time        # 滤篮开始堵塞时间\n"
"float32 phy_area               # 物理面积\n"
"int32 charge_position          # 充电点位次数\n"
"int32 in_water_positon         # 入水点位次数\n"
"int32 fall_count               # 跌落次数\n"
"int32 loop                     # 回环误差值\n"
"int32 density                  # 水密度值\n"
"int32 in_water_signal          # 入水点信号强度\n"
"int32 in_water_level           # 入水点等级\n"
"int32 charge_signal            # 充电信号强度\n"
"int32 charge_level             # 充电点等级\n"
"#磁力计信息-半小时1次，单任务6次\n"
"\n"
"## 清洁不同区域共同信息\n"
"int32 mode                     # 清扫模式   1-水面模式 2-池底 3-池壁\n"
"float32 clean_area             # 清扫面积\n"
"int32[] trapped_reason         # 被困触发条件\n"
"int32 trapped_count            # 被困次数\n"
"int32 task_status              # 任务状态 0-失败 1-成功\n"
"float32 mapped_area            # 建图面积\n"
"int32 untrapped_status         # 脱困状态  0-未脱困 1-脱困\n"
"int32 untrapped_count          # 脱困次数\n"
"\n"
"## 水面清洁信息\n"
"float32 suface_border_max      # 延边最大距离\n"
"float32 suface_border_min      # 延边最小距离\n"
"float32 suface_border_avg      # 延边平均距离\n"
"float32 suface_border_std      # 延边方差\n"
"int32 ject_count               # 水面喷口角度变化的次数（水面）\n"
"int32 suface_init_time         # 定位初始化时长\n"
"\n"
"## 池底清洁信息\n"
"int32 bottom_avoidance_count   # 避障次数\n"
"float32 miss_area              # 单边弓任务漏扫区域面积（池底）\n"
"int32 relocation_status        # 重定位状态 0-失败 1-成功\n"
"int32 relocation_fail_reason   # 重定位失败原因（池底）\n"
"float32 bottom_border_max      # 延边最大距离\n"
"float32 bottom_border_min      # 延边最小距离\n"
"float32 bottom_border_avg      # 延边平均距离\n"
"float32 bottom_border_std      # 延边方差\n"
"int32 bottom_border_start_time   # 延边开始时间\n"
"int32 bottom_border_end_time     # 延边结束时间\n"
"int32 bottom_border_fail_time    # 延边失败时间\n"
"int32 bottom_border_status       # 延边状态 0-失败 1-成功\n"
"int32 bottom_init_time         # 定位初始化时长\n"
"int32[] pitch                  # 俯仰角度数（池底）-单任务5次\n"
"int32 under_view               # 下视触发次数（池底）\n"
"int32 relocation_start_time    # 重定位开始时间\n"
"int32 relocation_end_time      # 重定位结束时间\n"
"\n"
"## 池壁清洁信息\n"
"int32 wall_avoidance_count     # 避障次数\n"
"# yaw角度，yaw角度占比值\n"
"int32[] wall_move              # 池壁侧移触发原因（池壁）\n"
"int32 wall_move_count          # 池壁侧移次数（池壁）\n"
"\n"
"## 召回\n"
"int32 recall_status            # 召回状态 0-失败 1-成功\n"
"\n"
"## 回充\n"
"int32 compensate_reason        # 回充原因 0-低电量 1-任务结束 2-召回\n"
"int32 compensate_retry         # 回充对桩尝试次数\n"
"int32 compensate_status        # 回充上电状态 0-失败 1-成功\n"
;
  }

  static const char* value(const ::hj_interface::NaviActionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.CleanRecord);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NaviActionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::NaviActionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::NaviActionResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "CleanRecord: ";
    s << std::endl;
    Printer< ::hj_interface::CleanRecord_<ContainerAllocator> >::stream(s, indent + "  ", v.CleanRecord);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_NAVIACTIONRESPONSE_H
