// Generated by gencpp from file hj_interface/AppMsg.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_APPMSG_H
#define HJ_INTERFACE_MESSAGE_APPMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/AppData.h>
#include <hj_interface/AppData.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct AppMsg_
{
  typedef AppMsg_<ContainerAllocator> Type;

  AppMsg_()
    : appdata()
    , metadata()
    , session()
    , timestamp(0)
    , from(0)
    , to(0)  {
    }
  AppMsg_(const ContainerAllocator& _alloc)
    : appdata(_alloc)
    , metadata(_alloc)
    , session(_alloc)
    , timestamp(0)
    , from(0)
    , to(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::hj_interface::AppData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hj_interface::AppData_<ContainerAllocator> >> _appdata_type;
  _appdata_type appdata;

   typedef std::vector< ::hj_interface::AppData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hj_interface::AppData_<ContainerAllocator> >> _metadata_type;
  _metadata_type metadata;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _session_type;
  _session_type session;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _from_type;
  _from_type from;

   typedef uint8_t _to_type;
  _to_type to;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BLUETOOTH)
  #undef BLUETOOTH
#endif
#if defined(_WIN32) && defined(SHADOW)
  #undef SHADOW
#endif
#if defined(_WIN32) && defined(TOPIC)
  #undef TOPIC
#endif
#if defined(_WIN32) && defined(CLOUD)
  #undef CLOUD
#endif
#if defined(_WIN32) && defined(BIGDATA)
  #undef BIGDATA
#endif
#if defined(_WIN32) && defined(AP)
  #undef AP
#endif

  enum {
    BLUETOOTH = 1u,
    SHADOW = 2u,
    TOPIC = 4u,
    CLOUD = 8u,
    BIGDATA = 16u,
    AP = 32u,
  };


  typedef boost::shared_ptr< ::hj_interface::AppMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::AppMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AppMsg_

typedef ::hj_interface::AppMsg_<std::allocator<void> > AppMsg;

typedef boost::shared_ptr< ::hj_interface::AppMsg > AppMsgPtr;
typedef boost::shared_ptr< ::hj_interface::AppMsg const> AppMsgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::AppMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::AppMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::AppMsg_<ContainerAllocator1> & lhs, const ::hj_interface::AppMsg_<ContainerAllocator2> & rhs)
{
  return lhs.appdata == rhs.appdata &&
    lhs.metadata == rhs.metadata &&
    lhs.session == rhs.session &&
    lhs.timestamp == rhs.timestamp &&
    lhs.from == rhs.from &&
    lhs.to == rhs.to;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::AppMsg_<ContainerAllocator1> & lhs, const ::hj_interface::AppMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AppMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::AppMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AppMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::AppMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AppMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::AppMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f80b28a7c76e9a6a6d1cf9dcd563d20";
  }

  static const char* value(const ::hj_interface::AppMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f80b28a7c76e9a6ULL;
  static const uint64_t static_value2 = 0xa6d1cf9dcd563d20ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/AppMsg";
  }

  static const char* value(const ::hj_interface::AppMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AppData[]  appdata\n"
"AppData[]  metadata\n"
"string     session\n"
"uint64     timestamp\n"
"uint8      from \n"
"uint8      to     \n"
"uint8      BLUETOOTH = 1\n"
"uint8      SHADOW  = 2\n"
"uint8      TOPIC = 4\n"
"uint8      CLOUD = 8\n"
"uint8      BIGDATA = 16\n"
"uint8      AP = 32       #internal use\n"
"\n"
"================================================================================\n"
"MSG: hj_interface/AppData\n"
"string key\n"
"string payload\n"
"int8  res    	#response code\n"
"\n"
;
  }

  static const char* value(const ::hj_interface::AppMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::AppMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.appdata);
      stream.next(m.metadata);
      stream.next(m.session);
      stream.next(m.timestamp);
      stream.next(m.from);
      stream.next(m.to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AppMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::AppMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::AppMsg_<ContainerAllocator>& v)
  {
    s << indent << "appdata[]" << std::endl;
    for (size_t i = 0; i < v.appdata.size(); ++i)
    {
      s << indent << "  appdata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hj_interface::AppData_<ContainerAllocator> >::stream(s, indent + "    ", v.appdata[i]);
    }
    s << indent << "metadata[]" << std::endl;
    for (size_t i = 0; i < v.metadata.size(); ++i)
    {
      s << indent << "  metadata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hj_interface::AppData_<ContainerAllocator> >::stream(s, indent + "    ", v.metadata[i]);
    }
    s << indent << "session: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.session);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "from: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.from);
    s << indent << "to: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.to);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_APPMSG_H
