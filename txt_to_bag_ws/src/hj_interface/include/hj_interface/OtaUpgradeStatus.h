// Generated by gencpp from file hj_interface/OtaUpgradeStatus.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_OTAUPGRADESTATUS_H
#define HJ_INTERFACE_MESSAGE_OTAUPGRADESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hj_interface
{
template <class ContainerAllocator>
struct OtaUpgradeStatus_
{
  typedef OtaUpgradeStatus_<ContainerAllocator> Type;

  OtaUpgradeStatus_()
    : todo()
    , stage(0)
    , progress(0.0)
    , module(0)
    , ret(0)
    , msg()  {
    }
  OtaUpgradeStatus_(const ContainerAllocator& _alloc)
    : todo(_alloc)
    , stage(0)
    , progress(0.0)
    , module(0)
    , ret(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _todo_type;
  _todo_type todo;

   typedef int32_t _stage_type;
  _stage_type stage;

   typedef float _progress_type;
  _progress_type progress;

   typedef int32_t _module_type;
  _module_type module;

   typedef int32_t _ret_type;
  _ret_type ret;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> const> ConstPtr;

}; // struct OtaUpgradeStatus_

typedef ::hj_interface::OtaUpgradeStatus_<std::allocator<void> > OtaUpgradeStatus;

typedef boost::shared_ptr< ::hj_interface::OtaUpgradeStatus > OtaUpgradeStatusPtr;
typedef boost::shared_ptr< ::hj_interface::OtaUpgradeStatus const> OtaUpgradeStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator1> & lhs, const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator2> & rhs)
{
  return lhs.todo == rhs.todo &&
    lhs.stage == rhs.stage &&
    lhs.progress == rhs.progress &&
    lhs.module == rhs.module &&
    lhs.ret == rhs.ret &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator1> & lhs, const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cb755155965318316b0e63093364936";
  }

  static const char* value(const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cb7551559653183ULL;
  static const uint64_t static_value2 = 0x16b0e63093364936ULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/OtaUpgradeStatus";
  }

  static const char* value(const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string   todo      # 当前操作为OTA升级 UpdateOTA：ota升级\n"
"int32    stage     # 0 下载 1 升级\n"
"float32  progress  # 下载或者升级进度\n"
"int32    module    # 1 mcu 2 power 3 core 注: stage=1时 关注此字段\n"
"int32    ret       # 升级结果 0 成功；-1 失败\n"
"string   msg       # 升级失败时，填充失败原因\n"
;
  }

  static const char* value(const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.todo);
      stream.next(m.stage);
      stream.next(m.progress);
      stream.next(m.module);
      stream.next(m.ret);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OtaUpgradeStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::OtaUpgradeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::OtaUpgradeStatus_<ContainerAllocator>& v)
  {
    s << indent << "todo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.todo);
    s << indent << "stage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stage);
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
    s << indent << "module: ";
    Printer<int32_t>::stream(s, indent + "  ", v.module);
    s << indent << "ret: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ret);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_OTAUPGRADESTATUS_H
