// Generated by gencpp from file hj_interface/PeriodicTaskPkg.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_PERIODICTASKPKG_H
#define HJ_INTERFACE_MESSAGE_PERIODICTASKPKG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hj_interface/PeriodicWeekdayTask.h>
#include <hj_interface/PeriodicIntervalTask.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct PeriodicTaskPkg_
{
  typedef PeriodicTaskPkg_<ContainerAllocator> Type;

  PeriodicTaskPkg_()
    : task_type(0)
    , task_mode(0)
    , cancelNowTask(0)
    , taskExecute(0)
    , weekday_task()
    , interval_task()  {
    }
  PeriodicTaskPkg_(const ContainerAllocator& _alloc)
    : task_type(0)
    , task_mode(0)
    , cancelNowTask(0)
    , taskExecute(0)
    , weekday_task(_alloc)
    , interval_task(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _task_type_type;
  _task_type_type task_type;

   typedef int32_t _task_mode_type;
  _task_mode_type task_mode;

   typedef int32_t _cancelNowTask_type;
  _cancelNowTask_type cancelNowTask;

   typedef int32_t _taskExecute_type;
  _taskExecute_type taskExecute;

   typedef std::vector< ::hj_interface::PeriodicWeekdayTask_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hj_interface::PeriodicWeekdayTask_<ContainerAllocator> >> _weekday_task_type;
  _weekday_task_type weekday_task;

   typedef  ::hj_interface::PeriodicIntervalTask_<ContainerAllocator>  _interval_task_type;
  _interval_task_type interval_task;





  typedef boost::shared_ptr< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> const> ConstPtr;

}; // struct PeriodicTaskPkg_

typedef ::hj_interface::PeriodicTaskPkg_<std::allocator<void> > PeriodicTaskPkg;

typedef boost::shared_ptr< ::hj_interface::PeriodicTaskPkg > PeriodicTaskPkgPtr;
typedef boost::shared_ptr< ::hj_interface::PeriodicTaskPkg const> PeriodicTaskPkgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator1> & lhs, const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator2> & rhs)
{
  return lhs.task_type == rhs.task_type &&
    lhs.task_mode == rhs.task_mode &&
    lhs.cancelNowTask == rhs.cancelNowTask &&
    lhs.taskExecute == rhs.taskExecute &&
    lhs.weekday_task == rhs.weekday_task &&
    lhs.interval_task == rhs.interval_task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator1> & lhs, const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "535b4cfa0b1077987817552a6d884b8b";
  }

  static const char* value(const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x535b4cfa0b107798ULL;
  static const uint64_t static_value2 = 0x7817552a6d884b8bULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/PeriodicTaskPkg";
  }

  static const char* value(const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_type         #0-快速任务 1-计时任务 2-周期任务 3-手动任务\n"
"int32 task_mode         #1-间隔天数周期任务 2-按周周期任务\n"
"int32 cancelNowTask     #是否取消今天的周期的任务\n"
"int32 taskExecute       #表示周期任务是否生效\n"
"PeriodicWeekdayTask[] weekday_task\n"
"PeriodicIntervalTask interval_task\n"
"================================================================================\n"
"MSG: hj_interface/PeriodicWeekdayTask\n"
"string name_id\n"
"int32 weekday\n"
"string start_time\n"
"int32 taskExecute  #表示当天任务是否生效 0-不生效 1-生效\n"
"int32 smart        # 0-普通模式 1-智能模式\n"
"int32 under_water  # 0-不是水下模式 1-水下模式\n"
"CleanAreas[] clean_areas\n"
"int32 clean_mode   # 1-变频 2-标准 3-深度\n"
"================================================================================\n"
"MSG: hj_interface/CleanAreas\n"
"int32 clean_area  #清扫区域 1-水面 2-池底 3-池壁\n"
"int32 count       #清扫次数\n"
"int32 time        #清扫时间单位分钟\n"
"================================================================================\n"
"MSG: hj_interface/PeriodicIntervalTask\n"
"string name_id\n"
"string date\n"
"string start_time\n"
"int32 smart        # 0-普通模式 1-智能模式\n"
"int32 under_water  # 0-不是水下模式 1-水下模式\n"
"int32 interval_days\n"
"CleanAreas[] clean_areas\n"
"int32 clean_mode   # 1-变频 2-标准 3-深度\n"
;
  }

  static const char* value(const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_type);
      stream.next(m.task_mode);
      stream.next(m.cancelNowTask);
      stream.next(m.taskExecute);
      stream.next(m.weekday_task);
      stream.next(m.interval_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PeriodicTaskPkg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::PeriodicTaskPkg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::PeriodicTaskPkg_<ContainerAllocator>& v)
  {
    s << indent << "task_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_type);
    s << indent << "task_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_mode);
    s << indent << "cancelNowTask: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cancelNowTask);
    s << indent << "taskExecute: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskExecute);
    s << indent << "weekday_task[]" << std::endl;
    for (size_t i = 0; i < v.weekday_task.size(); ++i)
    {
      s << indent << "  weekday_task[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hj_interface::PeriodicWeekdayTask_<ContainerAllocator> >::stream(s, indent + "    ", v.weekday_task[i]);
    }
    s << indent << "interval_task: ";
    s << std::endl;
    Printer< ::hj_interface::PeriodicIntervalTask_<ContainerAllocator> >::stream(s, indent + "  ", v.interval_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_PERIODICTASKPKG_H
